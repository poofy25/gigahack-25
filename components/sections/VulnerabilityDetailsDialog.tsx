"use client";
import React, { useState } from "react";
import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "@/components/ui/dialog";
import { ActionItem } from "@/lib/api";
import { Tabs, TabsTrigger, TabsList } from "@/components/ui/tabs";
import { ScrollArea } from "@/components/ui/scroll-area";
import ReactMarkdown from "react-markdown";
import { Prism as SyntaxHighlighter } from "react-syntax-highlighter";
import { oneDark } from "react-syntax-highlighter/dist/esm/styles/prism";

type VulnerabilityItem = ActionItem;

interface VulnerabilityDetailsDialogProps {
  selectedVuln: VulnerabilityItem | null;
  onClose: () => void;
  onMarkResolved?: (vuln: VulnerabilityItem) => void;
}

export default function VulnerabilityDetailsDialog({
  selectedVuln,
  onClose,
  onMarkResolved,
}: VulnerabilityDetailsDialogProps) {
  const [activeTab, setActiveTab] = useState("non-technical");

  // Custom code block component for syntax highlighting
  const CodeBlock = ({ node, inline, className, children, ...props }: any) => {
    const match = /language-(\w+)/.exec(className || "");
    return !inline && match ? (
      <SyntaxHighlighter
        style={oneDark}
        language={match[1]}
        PreTag="div"
        className="rounded-md"
        {...props}
      >
        {String(children).replace(/\n$/, "")}
      </SyntaxHighlighter>
    ) : (
      <code className={className} {...props}>
        {children}
      </code>
    );
  };
  return (
    <Dialog open={!!selectedVuln} onOpenChange={onClose}>
      <DialogContent className="bg-zinc-800 border-zinc-700 max-w-2xl">
        <ScrollArea className="max-h-[600px]">
          <DialogHeader>
            <Tabs value={activeTab} onValueChange={setActiveTab}>
              <TabsList className="bg-zinc-700 text-zinc-300 rounded-[20px]">
                <TabsTrigger
                  value="non-technical"
                  className="rounded-[20px] data-[state=active]:bg-zinc-600"
                >
                  Non-Technical
                </TabsTrigger>
                {selectedVuln?.is_technical_complience && (
                <TabsTrigger
                  value="technical"
                  className="rounded-[20px] data-[state=active]:bg-zinc-600"
                >
                  Technical
                </TabsTrigger>
                )}
              </TabsList>
            </Tabs>
            <DialogTitle className="pt-4 pb-4">{selectedVuln?.title}</DialogTitle>
          </DialogHeader>

          {selectedVuln && (
            <div className="space-y-6 pr-4">
              {/* Alert Banner */}
              <div className="bg-[#EF444426] border border-red-300 rounded-lg p-4 flex items-start gap-3">
                <div className="flex-shrink-0 mt-0.5">
                  <svg
                    className="w-5 h-5 text-red-400"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                      clipRule="evenodd"
                    />
                  </svg>
                </div>
                <div>
                  <h3 className="font-semibold text-red-300 mb-1">
                    {selectedVuln.priority}
                  </h3>
                  <p className="text-red-200 text-sm">
                    {selectedVuln.bad_thing}
                  </p>
                </div>
              </div>

              {/* Issue Details */}
              <div className="grid grid-cols-2 gap-4">
                {selectedVuln.business_impact && (
                  <div>
                    <label className="text-sm font-medium text-zinc-400 block mb-1">
                      Business Impact
                    </label>
                    <div className="bg-zinc-700/50 rounded py-2 text-sm text-zinc-300">
                      {selectedVuln.business_impact}
                    </div>
                  </div>
                )}

                <div>
                  <label className="text-sm font-medium text-zinc-400 block mb-1">
                    Timeline
                  </label>
                  <div className="bg-zinc-700/50 rounded py-2 text-sm text-zinc-300 ">
                    {selectedVuln.timeline}
                  </div>
                </div>
              </div>

              {activeTab === "non-technical" && (
                <div>
                  <label className="text-sm font-medium text-zinc-400 block mb-1">
                    How to Fix (Simple)
                  </label>
                  <div className="bg-zinc-700/50 rounded text-sm text-zinc-300">
                    <ReactMarkdown
                      components={{
                        code: CodeBlock,
                        p: ({ children }) => (
                          <p className="mb-2 last:mb-0">{children}</p>
                        ),
                        ul: ({ children }) => (
                          <ul className="list-disc list-inside mb-2 space-y-1">
                            {children}
                          </ul>
                        ),
                        ol: ({ children }) => (
                          <ol className="list-decimal list-inside mb-2 space-y-1">
                            {children}
                          </ol>
                        ),
                        h1: ({ children }) => (
                          <h1 className="text-lg font-semibold mb-2 text-zinc-200">
                            {children}
                          </h1>
                        ),
                        h2: ({ children }) => (
                          <h2 className="text-base font-semibold mb-2 text-zinc-200">
                            {children}
                          </h2>
                        ),
                        h3: ({ children }) => (
                          <h3 className="text-sm font-semibold mb-1 text-zinc-200">
                            {children}
                          </h3>
                        ),
                        strong: ({ children }) => (
                          <strong className="font-semibold text-zinc-200">
                            {children}
                          </strong>
                        ),
                        em: ({ children }) => (
                          <em className="italic">{children}</em>
                        ),
                      }}
                    >
                      {selectedVuln.how_to_fix_simple}
                    </ReactMarkdown>
                  </div>
                </div>
              )}

              {activeTab === "technical" &&
                selectedVuln.is_technical_complience &&
                selectedVuln.how_to_fix_technical && (
                  <div>
                    <label className="text-sm font-medium text-zinc-400 block mb-1">
                      How to Fix (Technical)
                    </label>
                    <div className="bg-zinc-900/50 rounded text-sm text-zinc-300">
                      <ReactMarkdown
                        components={{
                          code: CodeBlock,
                          p: ({ children }) => (
                            <p className="mb-2 last:mb-0">{children}</p>
                          ),
                          ul: ({ children }) => (
                            <ul className="list-disc list-inside mb-2 space-y-1">
                              {children}
                            </ul>
                          ),
                          ol: ({ children }) => (
                            <ol className="list-decimal list-inside mb-2 space-y-1">
                              {children}
                            </ol>
                          ),
                          h1: ({ children }) => (
                            <h1 className="text-lg font-semibold mb-2 text-zinc-200">
                              {children}
                            </h1>
                          ),
                          h2: ({ children }) => (
                            <h2 className="text-base font-semibold mb-2 text-zinc-200">
                              {children}
                            </h2>
                          ),
                          h3: ({ children }) => (
                            <h3 className="text-sm font-semibold mb-1 text-zinc-200">
                              {children}
                            </h3>
                          ),
                          strong: ({ children }) => (
                            <strong className="font-semibold text-zinc-200">
                              {children}
                            </strong>
                          ),
                          em: ({ children }) => (
                            <em className="italic">{children}</em>
                          ),
                        }}
                      >
                        {selectedVuln.how_to_fix_technical}
                      </ReactMarkdown>
                    </div>
                  </div>
                )}
            </div>
          )}
        </ScrollArea>

        <DialogFooter className="gap-3 pt-4 border-t border-zinc-700">
          <Button
            variant="outline"
            onClick={onClose}
            className="border-zinc-600 text-zinc-300 hover:bg-zinc-700"
          >
            Close
          </Button>
          <Button
            onClick={() => selectedVuln && onMarkResolved?.(selectedVuln)}
          >
            Mark as Resolved
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}
